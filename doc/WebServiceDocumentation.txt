
Customers Resource:

	1: POST /customers/
		Send post request to this resource.  Attempts to register a new customer in the system.
			Parameters needed for request: 
			Sample JSON request fill in with strings:
			{
				Customer:{
				  userName:
				  firstName:
				  lastName:
				  address:
				  phone:
				  cardNumber:
				  cardName:
				  cvv:
				  expiration:
				}
			}
	2: GET /customers/{userName}/status
		Send a get request with {userName} replaced with a user's email address.
		If user does exist, response is sent back with status message: "Customer exists and is active."
		If user does not exist, response is sent back with status message: "User does not exist."

		Sample URI: http://[host]/customers/mariasmith@gmail.com/status

	3: GET /customers/{userName}
		Send a get request with {userName} replaced with a user's email address.
		If user does not exist, response is sent back with status message: "User not found"
		If user does exist, response is sent back containing a customer representation in body.

		Sample customer representation JSON: 
			{
				Customer:{
				  userName: ""
				  firstName: ""
				  lastName: ""
				  address: ""
				  phone: ""
				  cardNumber: ""
				  cardName: ""
				  cvv: "" 
				  expiration: ""
				}
			}

	4: DELETE /customers/{userName}
		Send a delete request with {userName} replaced with a user's email address.
		If user does not exist, response is sent back with status message: "User cannot be deleted"
		If user does exist and can be deleted a level 200 code is sent back in response

		Sample URI: http://[host]/customers/mariasmith@gmail.com

	5: PUT /customers/ 

		Send a put request to update a particular customer.  
		Body should contain customer-request-formatted json/xml.
		All attributes of customer can be updated except for the username.
		Despite this, the userName attribute is still needed in the request.
		Simply change update any valid attribute below and send a request. 
		The service will attempt to update the customer based on the request that 
		was sent. 
		Sample customer representation JSON: 
			{
				Customer:{
				  userName: ""
				  firstName: ""
				  lastName: ""
				  address: ""
				  phone: ""
				  cardNumber: ""
				  cardName: ""
				  cvv: "" 
				  expiration: ""
				}
			}
			
			
			

Products Resource:
	1:  GET /products/{productName}

		Send a GET request and replace productName in the URI path with the product that
		you are concerned with.
		The endpoint responds with a collection of product representations.  This may contain 0 to many products.

		Sample URI: http://[host]/products/SAMSUNG GALAXY S5

		This, for example, can return a json response like:

			{
				Product:[
					{
			 			id: [int]
  			  			desc: ""
  			 			cost: [float]
  			 		    stock: [int]
  			            companyUserName: ""
  			            name: ""
					},
					{
			 			id: [int]
  			  			desc: ""
  			 			cost: [float]
  			 		    stock: [int]
  			            companyUserName: ""
  			            name: ""
					}
				]
			}

	2: GET products/{productName}/reviews/

		Send a GET request with productName being replaced with a product name query
		Upon success, it should return all reviews for a given products. If no reviews exist,
		the collection is returned as empty.


		Sample URI: http://[host]/products/SAMSUNG GALAXY S5/reviews

		Upon success, it should return a json in this format:

			{
				Review:[
					{
						review: ""
						rating: ""
					},
					{
						review: ""
						rating: ""
					}
				]
			}
			
			
			
			
			
	Orders Resource:

	1: POST /orders/

		Send a POST request to this resource to place an order.  Body should contain a collection of orderRequest-formatted objects.
		A response is sent back with a orderRepresentation-formatted object.  The id should be > 0 if successful, otherwise the value is negative.


		Sample json request body:

		//Orders in this one should be plural
		{
			
			"Orders":[
				{
					"customer": "value"
 					"partner": "value"
 					"productName": "value"
   					"quantity": "value"
				}
			]
		}

		Sample json response:

		{
				"Order":{
					"orderId": 0
 					"timestamp": "value"
  					"status": "value"
 					"customer": "value"

				}

			}

	2: GET /orders/{orderId}
		Send a GET request to obtain minimal information about particular order.  
		Sample json response: 
			{
				"Order":{
					"orderId": 0
 					"timestamp": "value"
  					"status": "value"
 					"customer": "value"

				}

			}
	3: GET /orders/{orderID}
		Send a GET request and response returns current status of order.

	4: PUT /orders/{orderID}
		Send a PUT to this resource to "fullfill" the order.

	5: PUT /orders/{orderId}/shipment
		Send a PUT on this resource and order will "ship."
		
    6: DELETE /orders/{orderId}
    	Send a DELETE to this resource and it will cancel a specific order that has id = orderId.


			